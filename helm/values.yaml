nameOverride:
fullNameOverride:
openprojectImage: &openprojectImage "openproject/community:12"
sharedVolumeClaimName: &sharedVolumeClaimName '{{ template "app.name" . }}-opdata'

cache:
  image: memcached
  replicas: 1
  restartPolicy: Always
  strategy: {}
  networks: 
    - frontend
    - backend
  env: {}
  annotations: {}
  labels: {}
  livenessProbe: {}
  readinessProbe: {}
  resources: {}
  persistentVolumeClaim:
    # https://kubernetes.io/docs/concepts/storage/dynamic-provisioning/
    enabled: false
    mountPath: # -> default /var/usr/lib/cache, mount path for the cache container
    subPath: # -> default /cache, path on disk
    # annotations: {}
    # labels: {}
    # spec:
    #   accessModes:
    #     - ReadWriteOnce
    #   storageClassName: any
    #   resources:
    #     requests:
    #       storage: 10Gi
  metrics:
    enabled: true
    image: quay.io/prometheus/memcached-exporter:latest
    env: {}
    annotations: {}
    labels: {}
    livenessProbe: {}
    readinessProbe: {}
    resources: {}
  service:
    type: ClusterIP
    annotations: {}
    labels: {}

database:
  image: postgres:13
  replicas: 1
  restartPolicy: Always
  strategy:
    type: Recreate
  networks: 
    - frontend
    - backend
  env:
    POSTGRES_DB: openproject
  secret:
    POSTGRES_PASSWORD: p4ssw0rd
  annotations: {}
  labels: {}
  livenessProbe: {}
  readinessProbe: {}
  resources: {}
  terminationGracePeriodSeconds: 60
  persistentVolumeClaim:
    # https://kubernetes.io/docs/concepts/storage/dynamic-provisioning/
    enabled: true
    annotations: {}
    labels: {}
    spec:
      accessModes:
        - ReadWriteOnce
      storageClassName: any
      resources:
        requests:
          storage: 10Gi
  metrics:
    enabled: true
    image: prometheuscommunity/postgres-exporter:latest
    env: {}
    annotations: {}
    labels: {}
    livenessProbe: {}
    readinessProbe: {}
    resources: {}
  service:
    type: ClusterIP
    annotations: {}
    labels: {}


frontend:
  image: *openprojectImage
  replicas: 1
  restartPolicy: Always
  strategy: {}
  networks: 
    - frontend
  env:
    OPENPROJECT_RAILS__RELATIVE__URL__ROOT: ""
    RAILS_CACHE_STORE: memcache
    RAILS_MAX_THREADS: "16"
    RAILS_MIN_THREADS: "4"
    OPENPROJECT_EDITION: standard
  annotations: {}
  labels: {}
  livenessProbe:
    httpGet:
        path: /health_checks/default
        port: 8080
    failureThreshold: 3
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 3
  readinessProbe: {}
  resources: {}
  service:
    type: ClusterIP
    annotations: {}
    labels: {}


backend:
  image: *openprojectImage
  networks: 
    - backend
  strategy: 
    type: Recreate
  env:
    OPENPROJECT_RAILS__RELATIVE__URL__ROOT: ""
    RAILS_CACHE_STORE: memcache
    RAILS_MAX_THREADS: "16"
    RAILS_MIN_THREADS: "4"
    OPENPROJECT_EDITION: standard
  annotations: {}
  labels: {}
  cron:
    livenessProbe: {}
    readinessProbe: {}
    resources: {}
    restartPolicy: Always
  worker:
    replicas: 2
    livenessProbe: {}
    readinessProbe: {}
    resources: {}
    restartPolicy: Always

persistentVolumeClaims:
    # https://kubernetes.io/docs/concepts/storage/dynamic-provisioning/
  - name: *sharedVolumeClaimName
    annotations: {}
    labels: {}
    spec:
      storageClassName: ""
      volumeName: *sharedVolumeClaimName
      accessModes:
        - ReadWriteMany
      resources:
        requests:
          storage: 10Mi

persistentVolumes:
  # https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistent-volumes
  # NFS example: https://github.com/kubernetes/examples/tree/master/staging/volumes/nfs
  - name: *sharedVolumeClaimName
    spec:
      claimRef:
        name: *sharedVolumeClaimName
        namespace: "{{ .Release.Namespace }}"
      storageClassName: ""
      capacity:
        storage: 1Mi
      accessModes:
        - ReadWriteMany
      nfs:
        server: nfs-server # <- put here your NFS server host name or IP
        path: "/{{ template \"app.name\" . }}/{{ .Release.Namespace }}"  # <- put here your NFS server sub path
      mountOptions:
        - nfsvers=4.2 # <- put here your NFS server protocol version

ingress:
  enabled: true
  ingressClassName: nginx
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
  labels: {}
  tls: []
  rules:
    - host: k8s.openproject-dev.com # <- change to your desired host
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: '{{ template "app.name" . }}-frontend'
                port:
                  number: 80
      

policy:
  networking:
    enabled: false
    networks:
      - frontend
      - backend
